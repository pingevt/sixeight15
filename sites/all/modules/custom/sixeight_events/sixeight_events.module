<?php

/**
 * Implements hook_menu().
 */
function sixeight_events_menu() {

  $items['admin/config/sixeight/events'] = array(
    'title' => 'SixEight Events config',
    'description' => 'Configure google calendar and settings for syncing events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sixeight_events_settings'),
    'access arguments' => array('administer sixeight'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/sixeight/events/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/sixeight/events/sync'] = array(
    'title' => 'Sync SixEight Events',
    'description' => 'Configure google calendar and settings for syncing events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sixeight_events_sync_now'),
    'access arguments' => array('administer sixeight'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['sixeight/calendar/events'] = array(
    'page callback' => 'sixeight_events_list_events',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function sixeight_events_permission() {
  return array(
    'sync sixeight events' => array(
      'title' => t('Sync Six:Eight events'),
      'description' => t('Sync Six:Eight events.'),
    ),
  );
}

/**
 * Settings form
 */
function sixeight_events_settings() {
  $form = array();

  // Base URL.
  $form['sixeight_event_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('Base url for the callback. This should not change. Do not include leading or trailing slashes.'),
    '#default_value' => variable_get('sixeight_event_base_url', ''),
    '#size' => 50,
    '#required' => TRUE,
  );

  // API key.
  $form['sixeight_event_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('API Key'),
    '#default_value' => variable_get('sixeight_event_api_key', ''),
    '#size' => 50,
    '#required' => TRUE,
  );

  // Calendars
  $i = 1;
  while ($i !== FALSE) {
    $cal = variable_get('sixeight_event_calendar_' . $i, FALSE);

    $form['group-' . $i] = array(
      '#type' => 'fieldset',
    );

    $form['group-' . $i]['sixeight_event_calendar_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Calendar ' . $i . ' ID'),
      '#description' => t('Calendar ID'),
      '#default_value' => $cal,
      '#size' => 100,
    );
    $form['group-' . $i]['sixeight_event_calendar_' . $i . '_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Calendar ' . $i . ' Label'),
      '#description' => t('Calendar label. Make sure this is the exact label from google.'),
      '#default_value' => variable_get('sixeight_event_calendar_' . $i . '_label', ''),
      '#size' => 30,
    );

    $form['group-' . $i]['sixeight_event_calendar_' . $i . '_color'] = array(
      '#type' => 'jquery_colorpicker',
      '#title' => t('Calendar ' . $i . ' Color'),
      '#description' => t('Calendar label color'),
      '#default_value' => variable_get('sixeight_event_calendar_' . $i . '_color', 'ffffff'),
    );

    if ($cal == FALSE) {
      $i = FALSE;
    }
    else {
      $i++;
    }
  }

  return system_settings_form($form);
}

/**
 * Form to sync events now.
 */
function sixeight_events_sync_now() {
  $form = array();

  return $form;
}

function sixeight_events_sync_now_validate($form, &$form_state) {

}

function sixeight_events_sync_now_submit($form, &$form_state) {

}

/**
 * Implements hook_cron_queue_info().
 */
function sixeight_events_cron_queue_info() {
  $queues['sixeight_calendar_feed'] = array(
    'worker callback' => 'sixeight_sync_calendar_feed',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function sixeight_events_cron() {

  $queue = DrupalQueue::get('sixeight_calendar_feed');

  for ($i=1; $i<=2; $i++) {
    $item = $queue->claimItem();

    if (is_object($item)) {
      sixeight_sync_calendar_feed($item->data);
      $queue->deleteItem($item);
    }
  }
}

function sixeight_events_cronapi($op, $job = NULL) {

  $items['sixeight_events_schedule_queue'] = array(
    'description' => 'Schedule syncing of calendar queues.',
    'rule' => '0 23 * * *',
    'weight' => 1,
    'callback' => '_sixeight_events_schedule_queue',
    'arguments' => array(),
  );

  return $items;
}

function _sixeight_events_schedule_queue() {
  $now = time();

  $queue = DrupalQueue::get('sixeight_calendar_feed');

  $base_url = variable_get('sixeight_event_base_url', '');
  $path = 'events';
  $api_key = variable_get('sixeight_event_api_key', '');

  if ($base_url != '' && $path != '' && $api_key != '') {
    $i = 1;
    while ($i !== FALSE) {
      $cal_id = variable_get('sixeight_event_calendar_' . $i, FALSE);

      if ($cal_id == FALSE) {
        $i = FALSE;
      }
      else {
        $i++;

        for ($k=0; $k<=4; $k++) {

          $start = mktime(0, 0, 0, (date('m') + $k * 2), date('d'), date('Y'));
          $end   = mktime(0, 0, 0, (date('m') + $k * 2 + 2), date('d'), date('Y'));

          $queue->createItem(array(
            'base_url' => $base_url,
            'path' => $path,
            'calendar_id' => $cal_id,
            'api_key' => $api_key,
            'start' => $start,
            'end' => $end,
          ));

        }
      }
    }
  }
}

function sixeight_sync_calendar_feed($data) {
  _sixeight_sync_calendar_feed($data['base_url'], $data['path'], $data['calendar_id'], $data['api_key'], $data['start'], $data['end']);
}

function _sixeight_sync_calendar_feed($base_url, $path, $calendar_id, $api_key, $start_timestamp = NULL, $end_timestamp = NULL) {
  $events = array();
  if ($start_timestamp == NULL) {
    $start = date('Y-m-d'). 'T00:00:00' . date('P');
  }
  else {
    $start = date('Y-m-d', $start_timestamp). 'T00:00:00' . date('P', $start_timestamp);
  }

  if ($end_timestamp == NULL) {
    $end = date('Y-m-d', mktime(0, 0, 0, (date('m') + 6), 1, date('Y'))). 'T00:00:00' . date('P');
  }
  else {
    $end = date('Y-m-d', mktime(0, 0, 0, (date('m', $start_timestamp) + 6), 1, date('Y', $start_timestamp))). 'T00:00:00' . date('P', $start_timestamp);
  }

  $query = array(
    'key' => $api_key,
    'singleEvents' => 'true',
    'orderby' => 'startTime',
    'timeMin' => $start,
    'timeMax' => $end,
    'showDeleted' => 'true',
  );

  // Create formatted query string.
  foreach ($query as $i => &$item) {
    $item = $i . '=' . $item;
  }

  // Create URL
  $url = $base_url . '/' . $calendar_id . '/' . $path . '?' . implode('&', $query);

  // Initiate call.
  $ch = curl_init();

  // set URL and other appropriate options
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_REFERER, 'http://www.sixeight.org');

  $response = curl_exec($ch);
  curl_close($ch);

  $response = json_decode($response);

  if(isset($response->items)) {
    $events = $response->items;
  }

  $updated_count = 0;
  $created_count = 0;

  foreach ($events as $event) {

    // First, search based on event id;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'event')
      ->fieldCondition('field_event_event_id', 'value', $event->id);

    $r = $query->execute();

    // Date, make sure we take care of timezones correctly.
    $all_day = isset($event->start->date)? TRUE : FALSE;
    $granularity = array('year', 'month', 'day', 'hour', 'minute', 'second', 'timezone');

    if ($all_day) {
      $start_date = new DateObject($event->start->date, new DateTimeZone($response->timeZone));
      $end_date = new DateObject($event->end->date, new DateTimeZone($response->timeZone));

      // How Google handles all day events. I don't get it.
      $end_date->sub(new DateInterval('P1D'));
    }
    else {
      $start_date = new DateObject($event->start->dateTime, new DateTimeZone($response->timeZone));
      $end_date = new DateObject($event->end->dateTime, new DateTimeZone($response->timeZone));
    }

    foreach ($granularity as $g) {
      $start_date->addGranularity($g);
      $end_date->addGranularity($g);
    }

    // DB needs to store it as UTC, so we need format in UTC.
    $start_date->setTimezone(new DateTimeZone('UTC'));
    $end_date->setTimezone(new DateTimeZone('UTC'));

    // Update node
    if (isset($r['node'])) {
      $e = node_load(current($r['node'])->nid);

      $e->title = $event->summary;

      $updated_count++;
    }
    // Create node
    else {
      $e = new stdClass();
      $e->title = $event->summary;
      $e->type = "event";
      node_object_prepare($e);
      $e->language = LANGUAGE_NONE;
      $e->uid = 1;
      $e->status = 1;
      $e->promote = 0;
      $e->comment = 0;

      $e = node_submit($e);

      $created_count++;
    }

    // Status Possible values are:
    // "confirmed" - The event is confirmed. This is the default status.
    // "tentative" - The event is tentatively confirmed.
    // "cancelled" - The event is cancelled.
    if ($event->status == 'cancelled') {
      $e->status = 0;
    }
    else {
      $e->status = 1;
    }

    // Fill in fields
    $e->field_event_calendar_id[$e->language][0]['value'] = $calendar_id;
    $e->field_event_event_id[$e->language][0]['value'] = $event->id;
    $e->field_event_calendar[$e->language][0]['value'] = isset($response->summary)? $response->summary : '';
    $e->field_event_location[$e->language][0]['value'] = isset($event->location)? $event->location : '';
    $e->field_event_description[$e->language][0]['value'] =  isset($event->description)? $event->description : '';

    $e->field_event_date[$e->language][0] = array(
      'value' => $start_date->format('Y-m-d\TH:i:s'),
      'value2' => $end_date->format('Y-m-d\TH:i:s'),
      'timezone' => $response->timeZone,
    );

    node_save($e);

  }

  drupal_set_message('Updated ' . $updated_count . ' events');
  drupal_set_message('Created ' . $created_count . ' events');
}

function sixeight_events_list_events() {
  global $user;

  $date = isset($_GET['date'])? strtotime($_GET['date']) : mktime(0, 0, 0, date('m'), date('d'), date('Y'));

  $events = &drupal_static(__FUNCTION__);

  if (!isset($events[$date])) {
    if ($cache = cache_get('sixeight_events_for_calendar')) {
      $events = $cache->data;

      if (isset($events[$date])) {
        drupal_json_output($events[$date]);
        exit;
      }
    }

    $events[$date] = array();

    $results = views_get_view_result('events', 'default', date('Y-m', $date));

    foreach ($results as $result) {
      $node = node_load($result->nid);
      $node_date = $node->field_event_date[$node->language][0];

      $start_date = new DateObject($node_date['value'], new DateTimeZone($node_date['timezone_db']));
      $start_date->setTimezone(new DateTimeZone($node_date['timezone']));
      $end_date = new DateObject($node_date['value2'], new DateTimeZone($node_date['timezone_db']));
      $end_date->setTimezone(new DateTimeZone($node_date['timezone']));

      $build = node_view($node, 'sixeight_events_calendar_popup');

      $modal = array(
        //'#theme' => 'bootstrap_modal',
        'heading' => $node->title,
        'body' => drupal_render($build),
        'footer' => '',
        'attributes' => array(
          'id' => 'event-' . $node->nid,
        ),
        'html_heading' => FALSE,
      );



      $e = array(
        'title' => '<a type="button" class="" data-toggle="modal" data-target="#event-' . $node->nid . '">' . $node->title . '</a>',
        'startDate' => $start_date->format('Y-m-d'),
        'endDate' => $end_date->format('Y-m-d'),
        'class' => 'cal-' . drupal_html_class($node->field_event_calendar[$node->language][0]['value']),
        'popover' => theme('bootstrap_modal', $modal),
      );

      // Check if the user has the 'editor' role.
      if (in_array('admin', $user->roles) && $node->field_front_ad[LANGUAGE_NONE][0]['value']) {
        $e['title'] .= ' <i class="fa fa-caret-square-o-up"></i>';
      }

      $events[$date][] = $e;

    }

    cache_set('sixeight_events_for_calendar', $events);

    // Return json output.
    drupal_json_output($events[$date]);
    exit;
  }

  drupal_json_output($events[$date]);

}

function sixeight_events_build_legend() {
  $legend = array(
    '#theme' => 'item_list',
    '#title' => 'Calendars <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#calendarLegend">
        <span class="sr-only">Toggle Calendar Legend</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>',
    '#list_wrapper' => 'div',
    '#list_wrapper_attributes' => array(
      'class' => array('collapse in'),
      'id' => 'calendarLegend',
    ),
    '#items' => array(),
    '#attributes' => array(
      'class' => array('calendar-legend-list'),
    ),
  );
  $styles_css = '';

  $i = 1;
  while ($i !== FALSE) {
    $cal = variable_get('sixeight_event_calendar_' . $i, FALSE);

    if ($cal == FALSE) {
      $i = FALSE;
    }
    else {

      $color = variable_get('sixeight_event_calendar_' . $i . '_color', 'ffffff');
      $label = variable_get('sixeight_event_calendar_' . $i . '_label', '');

      $class = drupal_html_class($label);

      $legend['#items'][] = array(
        'data' => '<i class="cal-' . $class . ' cal-icon"></i>' . $label . '',
        'class' => array('toggle-calendar'),
        'data-target-class' => 'cal-' . $class,
      );

      $styles_css .= '.cal-' . $class . " {background-color: #$color;}\r\n";

      $i++;
    }

  }

  $legend['#suffix'] = '<style type="text/css">' . $styles_css . '</style>';

  return $legend;
}

/**
 * Implements hook_entity_info_alter().
 */
function sixeight_events_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['sixeight_events_calendar_popup'] = array(
    'label' => t('Calendar Popup'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_entity_view().
 */
function sixeight_events_entity_view($entity, $type, $view_mode, $langcode) {

  if ($type == 'node' && $entity->type == 'event' && $view_mode == 'full') {
    global $user;

    if (user_access('sync sixeight events', $user)) {
      $entity->content['sync_form'] = drupal_get_form('sixeight_events_sync_single_event_form', $entity);
    }
  }
}

function sixeight_events_sync_single_event_form($form, &$form_state, $entity) {
  $form = array(
    '#weight' => 900,
  );

  $form_state['entity'] = $entity;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sync Event'),
  );

  return $form;
}

function sixeight_events_sync_single_event_form_submit(&$form, &$form_state) {
  $event = $form_state['entity'];
  $time_zone = 'America/New_York';
  $wrapper = entity_metadata_wrapper('node', $event);

  $base_url = variable_get('sixeight_event_base_url', '');
  $path = $wrapper->field_event_calendar_id->value() . '/events/' . $wrapper->field_event_event_id->value();
  $api_key = variable_get('sixeight_event_api_key', '');

  $query = array(
    'key' => $api_key,
    'timeZone' => $time_zone,
  );
  // Create formatted query string.
  foreach ($query as $i => &$item) {
    $item = $i . '=' . $item;
  }

  // Create URL
  $url = $base_url . '/' . $path . '?' . implode('&', $query);

  // Initiate call.
  $ch = curl_init();

  // set URL and other appropriate options
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_REFERER, 'http://www.sixeight.org');

  $response = curl_exec($ch);
  curl_close($ch);

  $response = json_decode($response);

  if (isset($response->kind) && $response->kind == 'calendar#event') {
    $google_event = $response;

    // Date, make sure we take care of timezones correctly.
    $all_day = isset($google_event->start->date)? TRUE : FALSE;
    $granularity = array('year', 'month', 'day', 'hour', 'minute', 'second', 'timezone');

    if ($all_day) {
      $start_date = new DateObject($google_event->start->date, new DateTimeZone($time_zone));
      $end_date = new DateObject($google_event->end->date, new DateTimeZone($time_zone));

      // How Google handles all day events. I don't get it.
      $end_date->sub(new DateInterval('P1D'));
    }
    else {
      $start_date = new DateObject($google_event->start->dateTime, new DateTimeZone($time_zone));
      $end_date = new DateObject($google_event->end->dateTime, new DateTimeZone($time_zone));
    }

    foreach ($granularity as $g) {
      $start_date->addGranularity($g);
      $end_date->addGranularity($g);
    }

    // DB needs to store it as UTC, so we need format in UTC.
    $start_date->setTimezone(new DateTimeZone('UTC'));
    $end_date->setTimezone(new DateTimeZone('UTC'));

    // Status Possible values are:
    // "confirmed" - The event is confirmed. This is the default status.
    // "tentative" - The event is tentatively confirmed.
    // "cancelled" - The event is cancelled.
    if ($google_event->status == 'cancelled') {
      $event->status = 0;
    }
    else {
      $event->status = 1;
    }

    // Fill in fields
    $event->field_event_event_id[$event->language][0]['value'] = $google_event->id;
    $event->field_event_location[$event->language][0]['value'] = isset($google_event->location)? $google_event->location : '';
    $event->field_event_description[$event->language][0]['value'] =  isset($google_event->description)? $google_event->description : '';

    $event->field_event_date[$event->language][0] = array(
      'value' => $start_date->format('Y-m-d\TH:i:s'),
      'value2' => $end_date->format('Y-m-d\TH:i:s'),
      'timezone' => $time_zone,
    );

    node_save($event);
  }

}
