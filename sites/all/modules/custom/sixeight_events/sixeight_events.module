<?php

/**
 * Implements hook_menu().
 */
function sixeight_events_menu() {

  $items['admin/config/sixeight/events'] = array(
    'title' => 'SixEight Events config',
    'description' => 'Configure google calendar and settings for syncing events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sixeight_events_settings'),
    'access arguments' => array('administer sixeight'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/sixeight/events/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/sixeight/events/sync'] = array(
    'title' => 'Sync SixEight Events',
    'description' => 'Configure google calendar and settings for syncing events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sixeight_events_sync_now'),
    'access arguments' => array('administer sixeight'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Settings form
 */
function sixeight_events_settings() {
  $form = array();

  // Base URL.
  $form['sixeight_event_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('Base url for the callback. This should not change. Do not include leading or trailing slashes.'),
    '#default_value' => variable_get('sixeight_event_base_url', ''),
    '#size' => 50,
    '#required' => TRUE,
  );

  // Path .
  $form['sixeight_event_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#description' => t('Path. This should not change. Do not include leading or trailing slashes.'),
    '#default_value' => variable_get('sixeight_event_path', ''),
    '#size' => 50,
    '#required' => TRUE,
  );

  // API key.
  $form['sixeight_event_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('API Key'),
    '#default_value' => variable_get('sixeight_event_api_key', ''),
    '#size' => 50,
    '#required' => TRUE,
  );

  // Calendars
  $i = 1;
  while ($i !== FALSE) {
    $cal = variable_get('sixeight_event_calendar_' . $i, FALSE);


    $form['sixeight_event_calendar_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Calendar ' . $i . ' ID'),
      '#description' => t('Calendar ID'),
      '#default_value' => $cal,
      '#size' => 100,
    );
    $form['sixeight_event_calendar_' . $i . '_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Calendar ' . $i . ' Label'),
      '#description' => t('Calendar label'),
      '#default_value' => variable_get('sixeight_event_calendar_' . $i . '_label', ''),
      '#size' => 30,
    );

    $form['markup_' .$i] = array(
      '#marhup' => '<hr>',
    );

    if ($cal == FALSE) {
      $i = FALSE;
    }
    else {
      $i++;
    }
  }

  return system_settings_form($form);
}

/**
 * Form to sync events now.
 */
function sixeight_events_sync_now() {
  $form = array();

  return $form;
}

function sixeight_events_sync_now_validate($form, &$form_state) {

}

function sixeight_events_sync_now_submit($form, &$form_state) {

}

/**
 * Implements hook_cron_queue_info().
 */
function sixeight_events_cron_queue_info() {
  $queues['sixeight_calendar_feed'] = array(
    'worker callback' => 'sixeight_sync_calendar_feed',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function sixeight_events_cron() {

  $queue = DrupalQueue::get('sixeight_calendar_feed');

  $item = $queue->claimItem();
  sixeight_sync_calendar_feed($item->data);
  $queue->deleteItem($item);

}

function sixeight_events_cronapi($op, $job = NULL) {

  $items['sixeight_events_schedule_queue'] = array(
    'description' => 'Schedule syncing of calendar queues.',
    'rule' => '0 23 * * *',
    'weight' => 1,
    'callback' => '_sixeight_events_schedule_queue',
    'arguments' => array(),
  );

  $items['sixeight_events_reverse_sync'] = array(
    'description' => 'Check to see if events were deleted.',
    'rule' => '15 23 * * 5',
    'weight' => 2,
    'callback' => '_sixeight_events_reverse_sync',
    'arguments' => array(),
  );

  return $items;
}

function _sixeight_events_schedule_queue() {

  $queue = DrupalQueue::get('sixeight_calendar_feed');

  $base_url = variable_get('sixeight_event_base_url', '');
  $path = variable_get('sixeight_event_path', '');
  $api_key = variable_get('sixeight_event_api_key', '');

  if ($base_url != '' && $path != '' && $api_key != '') {
    $i = 1;
    while ($i !== FALSE) {
      $cal_id = variable_get('sixeight_event_calendar_' . $i, FALSE);

      if ($cal_id == FALSE) {
        $i = FALSE;
      }
      else {
        $i++;

        $queue->createItem(array(
          'base_url' => $base_url,
          'path' => $path,
          'calendar_id' => $cal_id,
          'api_key' => $api_key,
        ));
      }
    }
  }
}

function _sixeight_events_reverse_sync() {
  $queue = DrupalQueue::get('sixeight_sync_event');

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->fieldCondition('field_event_date', 'value', date('Y:m:d H:i:s'), '>');

  $r = $query->execute();

  if (isset($r['node'])) {
    $nids = array_keys($r['node']);

    foreach ($nids as $nid) {
      $queue->createItem(array('nid' => $nid));
    }
  }
}

function sixeight_sync_calendar_feed($data) {
  _sixeight_sync_calendar_feed($data['base_url'], $data['path'], $data['calendar_id'], $data['api_key']);
}

function _sixeight_sync_calendar_feed($base_url, $path, $calendar_id, $api_key, $all = FALSE) {
  $events = array();
  $start = date('Y-m-d'). 'T00:00:00' . date('P');

  $query = array(
    'key' => $api_key,
    'singleEvents' => 'true',
    'orderby' => 'starttime',
    'timeMin' => $start,
  );

  if ($all) {
    unset($query['timeMin']);
  }

  // Create formatted query string.
  foreach ($query as $i => &$item) {
    $item = $i . '=' . $item;
  }

  // Create URL
  $url = $base_url . '/' . $calendar_id . '/' . $path . '?' . implode('&', $query);

  // Initiate call.
  $ch = curl_init();

  // set URL and other appropriate options
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_REFERER, 'http://www.sixeight.org');

  $response = curl_exec($ch);
  curl_close($ch);

  $response = json_decode($response);

  if(isset($response->items)) {
    $events = $response->items;
  }

  foreach ($events as $event) {

    // First, search based on event id;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'event')
      ->fieldCondition('field_event_event_id', 'value', $event->id);

    $r = $query->execute();

    // Date, make sure we take care of timezones correctly.
    $all_day = isset($event->start->date)? TRUE : FALSE;
    $granularity = array('year', 'month', 'day', 'hour', 'minute', 'second', 'timezone');

    if ($all_day) {
      $start_date = new DateObject($event->start->date, new DateTimeZone($response->timeZone));
      $end_date = new DateObject($event->end->date, new DateTimeZone($response->timeZone));

      // How Google handles all day events. I don't get it.
      $end_date->sub(new DateInterval('P1D'));
    }
    else {
      $start_date = new DateObject($event->start->dateTime, new DateTimeZone($response->timeZone));
      $end_date = new DateObject($event->end->dateTime, new DateTimeZone($response->timeZone));
    }

    foreach ($granularity as $g) {
      $start_date->addGranularity($g);
      $end_date->addGranularity($g);
    }

    // DB needs to store it as UTC, so we need format in UTC.
    $start_date->setTimezone(new DateTimeZone('UTC'));
    $end_date->setTimezone(new DateTimeZone('UTC'));

    // Update node
    if (isset($r['node'])) {
      $e = node_load(current($r['node'])->nid);

      $e->title = $event->summary;

    }
    // Create node
    else {
      $e = new stdClass();
      $e->title = $event->summary;
      $e->type = "event";
      node_object_prepare($e);
      $e->language = LANGUAGE_NONE;
      $e->uid = 1;
      $e->status = 1;
      $e->promote = 0;
      $e->comment = 0;

      $e = node_submit($e);
    }

    // Fill in fields
    $e->field_event_calendar_id[$e->language][0]['value'] = $calendar_id;
    $e->field_event_event_id[$e->language][0]['value'] = $event->id;
    $e->field_event_calendar[$e->language][0]['value'] = isset($response->summary)? $response->summary : '';
    $e->field_event_location[$e->language][0]['value'] = isset($event->location)? $event->location : '';
    $e->field_event_description[$e->language][0]['value'] =  isset($event->description)? $event->description : '';

    $e->field_event_date[$e->language][0] = array(
      'value' => $start_date->format('Y-m-d\TH:i:s'),
      'value2' => $end_date->format('Y-m-d\TH:i:s'),
      'timezone' => $response->timeZone,
    );

    node_save($e);

  }
}
