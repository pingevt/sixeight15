<?php

/**
 * @file
 * Module for the church_event Entity - a starting point to create your own Entity
 * and associated administration interface
 */

define('CHURCH_EVENT_PATH', drupal_get_path('module', 'church_event'));

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function church_event_entity_info() {
  $return['church_event'] = array(
    'label' => t('Event'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'ChurchEvent',
    'controller class' => 'ChurchEventController',
    'base table' => 'church_event',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'church_event_id',
      'bundle' => 'type',
    ),
    // Bundles are defined by the church_event types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'church_event_create',
    'access callback' => 'church_event_access',
    'module' => 'church_event',
    // The information below is used by the ChurchEventUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/church_event',
      'file' => 'church_event.admin.inc',
      'controller class' => 'ChurchEventUIController',
      'menu wildcard' => '%church_event',
    ),
  );

  // The entity that holds information about the entity types
  $return['church_event_type'] = array(
    'label' => t('Church Event Type'),
    'entity class' => 'ChurchEventType',
    'controller class' => 'ChurchEventTypeController',
    'base table' => 'church_event_type',
    'fieldable' => FALSE,
    'bundle of' => 'church_event',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'church_event_type_access',
    'module' => 'church_event',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/church_event_type',
      'file' => 'church_event_type.admin.inc',
      'controller class' => 'ChurchEventTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the church_event types via a hook to avoid a recursion
 * issue as loading the church_event types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function church_event_entity_info_alter(&$entity_info) {
  foreach (church_event_get_types() as $type => $info) {
    $entity_info['church_event']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/church_event_type/manage/%church_event_type',
        'real path' => 'admin/structure/church_event_type/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer church_event type'),
      ),
    );
  }
}


/**
 * Implements hook_permission().
 */
function church_event_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer church_event type' => array(
      'title' => t('Administer church_event type'),
      'description' => t('Create and delete fields for church_event types, and set their permissions.'),
    ),
    'administer church_event' => array(
      'title' => t('Administer church_event'),
      'description' => t('Edit and delete all church_event'),
    ),
    'view church_event' => array(
      'title' => t('View church_event'),
      'description' => t('Edit and delete all church_event'),
    ),
  );

  //Generate permissions per church_event
  foreach (church_event_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name church_event" => array(
        'title' => t('%type_name: Edit any church_event', array('%type_name' => $type->label)),
      ),
      "view any $type_name church_event" => array(
        'title' => t('%type_name: View any church_event', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}


/**
 * Determines whether the given user has access to a church_event.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $church_event
 *   Optionally a church_event or a church_event type to check access for. If nothing is
 *   given, access for all church_event is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function church_event_access($op, $church_event = NULL, $account = NULL) {
  if (user_access('administer church_event', $account)) {
    return TRUE;
  }
  if (isset($church_event) && $type_name = $church_event->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name church_event", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function church_event_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer church_event types', $account);
}


/**
 * Gets an array of all church_event types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ChurchEventType[]
 *   Depending whether $type isset, an array of church_event types or a single one.
 */
function church_event_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our church_event entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('church_event_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a church_event type by string.
 *
 * @param $type
 *   The machine-readable name of a church_event type to load.
 * @return
 *   A church_event type array or FALSE if $type does not exist.
 */
function church_event_type_load($type) {
  return church_event_get_types($type);
}


/**
 * Fetch a church_event object. Make sure that the wildcard you choose
 * in the church_event entity definition fits the function name here.
 *
 * @param $church_event_id
 *   Integer specifying the church_event id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $church_event object or FALSE if it cannot be loaded.
 *
 * @see church_event_load_multiple()
 */
function church_event_load($church_event_id, $reset = FALSE) {
  $church_events = church_event_load_multiple(array($church_event_id), array(), $reset);
  return reset($church_events);
}


/**
 * Load multiple church_event based on certain conditions.
 *
 * @param $church_event_ids
 *   An array of church_event IDs.
 * @param $conditions
 *   An array of conditions to match against the {church_event} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of church_event objects, indexed by church_event_id.
 *
 * @see entity_load()
 * @see church_event_load()
 */
function church_event_load_multiple($church_event_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('church_event', $church_event_ids, $conditions, $reset);
}


/**
 * Deletes a church_event.
 */
function church_event_delete(ChurchEvent $church_event) {
  $church_event->delete();
}


/**
 * Delete multiple church_event.
 *
 * @param $church_event_ids
 *   An array of church_event IDs.
 */
function church_event_delete_multiple(array $church_event_ids) {
  entity_get_controller('church_event')->delete($church_event_ids);
}


/**
 * Create a church_event object.
 */
function church_event_create($values = array()) {
  return entity_get_controller('church_event')->create($values);
}


/**
 * Saves a church_event to the database.
 *
 * @param $church_event
 *   The church_event object.
 */
function church_event_save(ChurchEvent $church_event) {
  return $church_event->save();
}


/**
 * Saves a church_event type to the db.
 */
function church_event_type_save(ChurchEventType $type) {
  $type->save();
}


/**
 * Deletes a church_event type from the db.
 */
function church_event_type_delete(ChurchEventType $type) {
  $type->delete();
}


/**
 * URI callback for church_event
 */
function church_event_uri(ChurchEvent $church_event){
  return array(
    'path' => 'church_event/' . $church_event->church_event_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function church_event_page_title(ChurchEvent $church_event){
  return $church_event->date;
}


/**
 * Sets up content to show an individual church_event
 * @todo - get rid of drupal_set_title();
 */
function church_event_page_view($church_event, $view_mode = 'full') {
  $controller = entity_get_controller('church_event');
  $content = $controller->view(array($church_event->church_event_id => $church_event));
  drupal_set_title($church_event->date);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function church_event_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'church_event') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function church_event_theme() {
  return array(
    'church_event_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'church_event.admin.inc',
    ),
    'church_event' => array(
      'render element' => 'elements',
      'template' => 'church_event',
    ),
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function church_event_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'church_event/%') {
    $data['tabs'][0]['count'] = 3;

    $item = menu_get_item('church_event/' . $router_item['original_map'][1]);
    $item['title'] = 'View';
    if ($item['access']) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
        '#active' => TRUE,
      );
    }

    $item = menu_get_item('admin/content/church_event/manage/' . $router_item['original_map'][1] . '/edit');
    if ($item['access']) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
      );
    }

    $item = menu_get_item('admin/content/church_event/manage/' . $router_item['original_map'][1] . '/delete');
    if ($item['access']) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
      );
    }

    $item = menu_get_item('admin/content/church_event/manage/' . $router_item['original_map'][1] . '/export');
    $item['title'] = 'Export';
    if ($item['access']) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
      );
    }
  }

  // Add action link 'admin/structure/church_event/add' on 'admin/structure/church_event'.
  if ($root_path == 'admin/content/church_event') {
    $item = menu_get_item('admin/content/church_event/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for church_event entities
 */
class ChurchEvent extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'church_event');
  }

  protected function defaultLabel() {
    return date('Y-m-d', $this->date);
  }

  protected function defaultUri() {
    return array('path' => 'church_event/' . $this->church_event_id);
  }


}


/**
 * The class used for church_event type entities
 */
class ChurchEventType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'church_event_type');
  }

}


/**
 * The Controller for ChurchEvent entities
 */
class ChurchEventController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a church_event - we first set up the values that are specific
   * to our church_event schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the church_event.
   *
   * @return
   *   A church_event object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our church_event
    $values += array(
      'church_event_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );

    $church_event = parent::create($values);
    return $church_event;
  }

  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    return $content;
  }

}


/**
 * The Controller for ChurchEventType entities
 */
class ChurchEventTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

   /**
   * Create a church_event type - we first set up the values that are specific
   * to our church_event type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the church_event.
   *
   * @return
   *   A church_event type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our ChurchEvent
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $church_event_type = parent::create($values);
    return $church_event_type;
  }

  /**
   * Builds and executes the query for loading.
   *
   * @return The results in a Traversable object.
   */
/*
  public function query($ids, $conditions, $revision_id = FALSE) {
    // Build the query.
    $query = $this->buildQuery($ids, $conditions, $revision_id);
    $result = $query->execute();

    return $result;
  }
*/

}

function church_event_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}


function church_event_field_group_info() {
  $field_groups = array();

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_population|church_event|sunday_morning|form';
  $field_group->group_name = 'group_population';
  $field_group->entity_type = 'church_event';
  $field_group->bundle = 'sunday_morning';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Population',
    'weight' => '0',
    'children' => array(
      0 => 'field_adult_count',
      1 => 'field_kids_count',
      2 => 'field_nursery_prek_count',
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'label' => 'Population',
      'instance_settings' => array(
        'required_fields' => 1,
        'classes' => '',
        'description' => '',
      ),
      'formatter' => 'collapsible',
    ),
  );
  $field_groups['group_population|church_event|sunday_morning|form'] = $field_group;

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_money|church_event|sunday_morning|form';
  $field_group->group_name = 'group_money';
  $field_group->entity_type = 'church_event';
  $field_group->bundle = 'sunday_morning';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Money',
    'weight' => '1',
    'children' => array(
      0 => 'field_general_fund_amt',
      1 => 'field_total_deposit_amt',
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'label' => 'Money',
      'instance_settings' => array(
        'required_fields' => 1,
        'classes' => '',
        'description' => '',
      ),
      'formatter' => 'collapsible',
    ),
  );
  $field_groups['group_money|church_event|sunday_morning|form'] = $field_group;

  return $field_groups;
}






/**
 *  Implements hook_block_info()
 */
function church_event_block_info() {
  $blocks = array();

  $blocks['three_month_summary'] = array(
    'info' => t('3 Month Summary'),
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'administrative' => TRUE,
    ),
  );

  $blocks['attendance_chart'] = array(
    'info' => t('6 month attendance chart'),
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'administrative' => TRUE,
    ),
  );

  $blocks['year_comparison'] = array(
    'info' => t('Year to Year Comparison'),
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'administrative' => TRUE,
    ),
  );

  return $blocks;
}

/**
 *  Implements hook_block_view()
 */
function church_event_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'three_month_summary':
      $block['subject'] = t('Twelve month summary');
      if (user_access('view church_event')) {
        drupal_add_css(CHURCH_EVENT_PATH . '/css/church_event_styles.css');
        $block['content'] = _block_three_month_summary();
      }
      else {
        $block['content'] = 'You are not allowed to view this content';
      }
      break;
    case 'attendance_chart':
      $block['subject'] = t('Six month attendance chart');
      if (user_access('view church_event')) {
        $block['content'] = _block_attendance_chart();
      }
      else {
        $block['content'] = 'You are not allowed to view this content';
      }
      break;
    case 'year_comparison':
      $block['subject'] = t('Year to Year Comparison');
      if (user_access('view church_event')) {
        $block['content'] = _year_to_year_comparison();
      }
      else {
        $block['content'] = 'You are not allowed to view this content';
      }
      break;
  }

  return $block;
}

function _block_three_month_summary() {

  $month = date('m');
  $header = array('Month', 'Avg Attendance', 'Avg GF Giving', 'Total Giving');
  $rows = array();
//print '<pre>';
  for($i = $month-12; $i<= $month; $i++) {
    $start = mktime(0, 0, 0, $i, 1);
    $end = mktime(23, 59, 59, $i, date('t', mktime(0, 0, 0, $i, 1)));

    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'church_event')
                      ->propertyCondition('date', array($start, $end), 'BETWEEN')
                      ->execute();

    if(isset($entities['church_event'])) $events = entity_load('church_event', array_keys($entities['church_event']));
    else $events = array();
//print_r($events);

    $pop = 0;
    $gf_giving = 0;
    $gf_giving_avg = 0;


    $count = 0;
    foreach($events as $e) {
      if(isset($e->field_adult_count['und'][0]['value'] )) $pop += $e->field_adult_count['und'][0]['value'];
      if(isset($e->field_kids_count['und'][0]['value'])) $pop += $e->field_kids_count['und'][0]['value'];
      if(isset($e->field_nursery_prek_count['und'][0]['value'] )) $pop += $e->field_nursery_prek_count['und'][0]['value'] ;

      $gf_giving += isset($e->field_general_fund_amt['und'][0]['value'])? $e->field_general_fund_amt['und'][0]['value'] : 0;
      $count++;
    }

    if($count != 0) { $pop = $pop / $count; $gf_giving_avg = $gf_giving / $count;}

    $rows[] = array(
      date('M, Y', mktime(0, 0, 0, $i, 1)),
      round($pop, 0),
      '$' . number_format(round($gf_giving_avg, 2), 2),
      '$' . number_format(round($gf_giving, 2), 2),
    );

  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

function _block_attendance_chart() {
//print '<pre>';
  $month = date('m');
  $start = mktime(0, 0, 0, $month-5, 1, date('Y'));
  $end = mktime(23, 59, 59, $month, date('t', mktime(0, 0, 0, $month, 1)));

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'church_event')
                    ->propertyCondition('date', array($start, $end), 'BETWEEN')
                    ->propertyOrderBy('date', 'ASC')
                    ->execute();

  $results = array();
  $sums = array(
    'sumx' => 0,
    'sumx2' => 0,
    'sumy' => 0,
    'sumx*y' => 0,

    'g_sumy' => 0,
    'g_sumx*y' => 0,
  );

  $c = 1;
  foreach($entities['church_event'] AS $cid => $event) {
    $e = church_event_load($cid);
    $ew = entity_metadata_wrapper('church_event', $e);

    $count = $ew->field_adult_count->value() + $ew->field_nursery_prek_count->value() + $ew->field_kids_count->value();
    $results[] = array('date' => date('m-d', $e->date), 'num'=>$count, 'giving'=> $ew->field_general_fund_amt->value());

    $sums['sumx'] += $c;
    $sums['sumx2'] += $c*$c;
    $sums['sumy'] += $count;
    $sums['sumx*y'] += $count * $c;
    $sums['g_sumy'] += $ew->field_general_fund_amt->value();
    $sums['g_sumx*y'] += $ew->field_general_fund_amt->value() * $c;

    $c++;
  }

  $c--;

  if (($sums['sumx2'] - $sums['sumx']*$sums['sumx']) == 0) {
    $a = $b = $a2 = $b2 = 0;
  }
  else {
    $b = ($sums['sumx*y'] - $sums['sumx'] * $sums['sumy'] / $c) / ($sums['sumx2'] - $sums['sumx']*$sums['sumx']/ $c);
    $a = ($sums['sumy'] / $c) - $b * ( $sums['sumx'] / $c);


    $b2 = ($sums['g_sumx*y'] - $sums['sumx'] * $sums['g_sumy'] / $c) / ($sums['sumx2'] - $sums['sumx']*$sums['sumx']/ $c);
    $a2 = ($sums['g_sumy'] / $c) - $b2 * ( $sums['sumx'] / $c);
  }

  $trend_line = array();
  for($i=1; $i<= count($results); $i++) {
    $trend_line[$i] = $a + $b * $i;
  }

  $g_trend_line = array();
  for($i=1; $i<= count($results); $i++) {
    $g_trend_line[$i] = $a2 + $b2 * $i;
  }

  $six_month_average = $sums['sumy'] / $c;

  $string = '';

  $string .= 'google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
        var data = new google.visualization.DataTable();

        data.addColumn(\'string\', \'Date\');
        data.addColumn(\'number\', \'Attend. Trend\');
        data.addColumn({type: \'string\', role: \'tooltip\'});
        data.addColumn(\'number\', \'Attend. Trend\');
        data.addColumn(\'number\', \'Giving\');
        data.addColumn(\'number\', \'Giving Trend\');
        data.addRows([';

  $c = 1;
  foreach($results as $count => $r) {
    $string .= "
          ['". $r['date'] ."', ". $trend_line[$c] .", '', ". $r['num'] .", ". $r['giving'] .", ". $g_trend_line[$c] ."]";

    if($count + 1 != count($results)) $string .= ',';

    $c++;
  }

  $string .= '
        ]);

        var options = {
          title: \'Six Month Attendance\',
          legend: {
            position: "top",
          },
          hAxis: {
            slantedText: 1,
            slantedTextAngle: 80
          },
          series: [{color: "#cca3a3", visibleInLegend: false}, {color: "red", visibleInLegend: true}, {color: "green", visibleInLegend: true, targetAxisIndex: 1}, {color: "#a3cca3", visibleInLegend: false, targetAxisIndex: 1}],
        };

        var chart = new google.visualization.LineChart(document.getElementById(\'chart_div\'));
        chart.draw(data, options);
      }';
//print $string;
  drupal_add_js('https://www.google.com/jsapi', array('type' => 'external', 'scope' => 'footer', 'weight' => 4));
  drupal_add_js($string, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
//print '</pre>';
  return '<div id="chart_div" style="height: 300px;"></div><div><h3 style="text-align: center">Six month average: '. round($six_month_average, 2) .'</h3></div>';
}

function _year_to_year_comparison() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'church_event')
                    ->propertyOrderBy('date', 'ASC')
                    ->addMetaData('account', user_load(1))
                    ->execute();

  $results = array();
  $sums = array(
    'sumx' => 0,
    'sumx2' => 0,
    'sumy' => 0,
    'sumx*y' => 0,

    'g_sumy' => 0,
    'g_sumx*y' => 0,
  );

  $events = array();

  //sort $events into year and months
  foreach ($entities['church_event'] as $ceid => $c) {
    $e = church_event_load($c->church_event_id);
    $events[date('Y', $e->date)][date('m', $e->date)][] = entity_metadata_wrapper('church_event', $e);
  }

  $number_of_years = count($events);

  //calculate data
  $years = array();
  $months_a = array(
    '01' => 'Jan',
    '02' => 'Feb',
    '03' => 'Mar',
    '04' => 'Apr',
    '05' => 'May',
    '06' => 'Jun',
    '07' => 'Jul',
    '08' => 'Aug',
    '09' => 'Sep',
    '10' => 'Oct',
    '11' => 'Nov',
    '12' => 'Dec',
  );

  foreach ($events AS $year => $months) {
    $years[] = $year;



    foreach ($months as $month => $mes) {
      $events[$year][$month]['#data'] = array(
        'count' => 0,
        'total_giving' => 0,
        'total_attendance' => 0,
        'avg_giving' => 0,
        'avg_attendance' => 0,
      );

      foreach ($mes as $k => $e) {
        $events[$year][$month]['#data']['count']++;
        $events[$year][$month]['#data']['total_giving'] += $e->field_general_fund_amt->value();
        $events[$year][$month]['#data']['total_attendance'] += $e->field_adult_count->value() + $e->field_kids_count->value() + $e->field_nursery_prek_count->value();
      }

      $events[$year][$month]['#data']['avg_giving'] = ($events[$year][$month]['#data']['count'] == 0 ) ? 0 : round(($events[$year][$month]['#data']['total_giving'] / $events[$year][$month]['#data']['count']), 2);
      $events[$year][$month]['#data']['avg_attendance'] = ($events[$year][$month]['#data']['count'] == 0 ) ? 0 : round(($events[$year][$month]['#data']['total_attendance'] / $events[$year][$month]['#data']['count']), 2);
    }
  }
  $string = '';

  $string .= 'google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawChart);
      function drawChart() {
        var data = new google.visualization.DataTable();

        data.addColumn(\'string\', \'Month\');';

  //build series options
  //{color: \"red\", visibleInLegend: true}, {color: \"red\", visibleInLegend: true, targetAxisIndex: 1, type: 'line'}, {color: \"green\", visibleInLegend: true}, {color: \"green\", visibleInLegend: true, targetAxisIndex: 1, type: 'line'}
  $series_string = '';

  $white = 'ffffff';
  $red = 'ff0000';
  $green = '008000';
  $blue = '00aeef';

  foreach($years AS $i => $year) {
    $string .= "\r\ndata.addColumn('number', '".$year." Avg Att');";
    $string .= "\r\ndata.addColumn('number', '".$year." Avg $');";
    $string .= "\r\ndata.addColumn('number', '".$year." Total $');";

    $brightness = .25 + ($i / $number_of_years);

    if ($brightness > 1) $brightness = 1;

    $series_string .= "{color: \"" . colourBrightness($red, $brightness) . "\", visibleInLegend: true, type: 'line', pointSize: 4}, {color: \"".colourBrightness($green, $brightness) . "\", visibleInLegend: true, targetAxisIndex: 1 }, {color: \"".colourBrightness($blue, $brightness) . "\", visibleInLegend: true, targetAxisIndex: 1 },";

  }



  foreach ($months_a as $m => $mname) {
    $string .= "\r\ndata.addRow(['". $mname ."', ";

    foreach ($years as $y) {
      if (isset($events[$y][$m])) $string .= "". $events[$y][$m]['#data']['avg_attendance'] .", ". $events[$y][$m]['#data']['avg_giving'] .", ". $events[$y][$m]['#data']['total_giving'] .",";
      else $string .= "null, null, null, ";
    }

    $string = substr($string, 0, -2);
    $string .= ']);';
  }



  $string .= "\r\n\r\nvar options = {
          title: 'Year to Year Comparison',
          titlePosition: 'out',
          legend: {
            position: 'bottom',
          },
          hAxis: {
            slantedText: 1,
            slantedTextAngle: 80
          },
          seriesType: 'bars',
          series: [". $series_string ."],
        };

        var chart = new google.visualization.ComboChart(document.getElementById('chart_div_y-t-y'));
        chart.draw(data, options);
}";

  drupal_add_js('https://www.google.com/jsapi', array('type' => 'external', 'scope' => 'footer', 'weight' => 4));
  drupal_add_js($string, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));

  return '<div id="chart_div_y-t-y" style="height: 400px;"></div>';
}


function colourBrightness($hex, $percent) {
	// Work out if hash given
	$hash = '';
	if (stristr($hex,'#')) {
		$hex = str_replace('#','',$hex);
		$hash = '#';
	}
	/// HEX TO RGB
	$rgb = array(hexdec(substr($hex,0,2)), hexdec(substr($hex,2,2)), hexdec(substr($hex,4,2)));
	//// CALCULATE
	for ($i=0; $i<3; $i++) {
		// See if brighter or darker
		if ($percent > 0) {
			// Lighter
			$rgb[$i] = round($rgb[$i] * $percent) + round(255 * (1-$percent));
		} else {
			// Darker
			$positivePercent = $percent - ($percent*2);
			$rgb[$i] = round($rgb[$i] * $positivePercent) + round(0 * (1-$positivePercent));
		}
		// In case rounding up causes us to go to 256
		if ($rgb[$i] > 255) {
			$rgb[$i] = 255;
		}
	}
	//// RBG to Hex
	$hex = '';
	for($i=0; $i < 3; $i++) {
		// Convert the decimal digit to hex
		$hexDigit = dechex($rgb[$i]);
		// Add a leading zero if necessary
		if(strlen($hexDigit) == 1) {
		$hexDigit = "0" . $hexDigit;
		}
		// Append to the hex string
		$hex .= $hexDigit;
	}
	return $hash.$hex;
}
