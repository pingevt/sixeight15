<?php

/**
 * Implements hook_library().
 */
function sixeight_admin_library() {

  $sm2_module_path = drupal_get_path('module', 'soundmanager2');
  $sm2_library_path = variable_get('sm2_path', 'sites/all/libraries/soundmanager2');

  return array(
    // SoundManager 2 mp3 player buttons
    'soundmanager2_mp3_player_buttons' => array(
      'title' => t('SoundManager 2 mp3 player buttons'),
      'website' => 'http://www.schillmania.com/projects/soundmanager2/demo/mp3-player-button/basic.html',
      'version' => '2.97',
      'js' => array(
        $sm2_library_path . '/demo/mp3-player-button/script/mp3-player-button.js' => array(),
      ),
      'css' => array(
        //$sm2_library_path . '/demo/mp3-player-button/css/mp3-player-button.css',
      ),
    ),
  );

}

/**
 * Implements hook_menu().
 */
function sixeight_admin_menu() {
  $items['admin/config/sixeight'] = array(
    'title' => 'Six:Eight',
    'description' => 'Configure Six:Eight specific settings.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // admin/config/sixeight/order/system-order
  $items['admin/config/sixeight/order'] = array(
    'title' => 'Six:Eight Ordering',
    'description' => 'Order Six:Eight items.',
    'position' => 'left',
    'page callback' => 'sixeight_admin_order_landing_page',
    'access arguments' => array('administer sixeight'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Overflow Files
  $items['system/overflow'] = array(
    'title' => 'overflow files',
    'page callback' => 'file_download',
    'page arguments' => array('overflow'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['system/overflow/styles/%image_style'] = array(
    'title' => 'Generate image style',
    'page callback' => 'image_style_deliver',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function sixeight_admin_menu_alter(&$items) {
  $items['node/%node']['page callback'] = 'sixeight_admin_node_page_view';

  // Resumable Download for mounted drive.
  $items['system/overflow']['page callback'] = '_resumable_download_download';
  $items['system/overflow']['file'] = 'resumable_download.inc';
  $items['system/overflow']['file path'] = drupal_get_path('module', 'resumable_download');

}

/**
 *  Redirect certain nodes to other pages.
 */
function sixeight_admin_node_page_view($node) {
  global $user;

  if ($user->uid != 1 && !in_array('editor', $user->roles)) {
    switch ($node->type) {
    case 'resource':
      drupal_goto('resources/other-resources', array('fragment' => 'node-' . $node->nid));
      break;
    case 'sermon':

      if ($node->status == 1) {
        $sermons_per_page = 10;
        $all_sermons = views_get_view_result('sermons', 'totals');

        $page = 0;
        foreach ($all_sermons as $i => $sermon) {
          if ($sermon->nid == $node->nid) {
            $page = floor($i / $sermons_per_page);
            break;
          }
        }
        drupal_goto('resources/sermons', array('fragment' => 'node-' . $node->nid, 'query' => array('page' => $page)));
      }
      break;
    case 'sermon_series':
      drupal_goto('resources/sermons', array('query' => array('field_sermon_series_target_id' => $node->nid)));
      break;
    case 'person':
      drupal_goto('about/people');
      break;
    case 'community_group':
      drupal_goto('connect/community-groups');
      break;
    }
  }

  return node_page_view($node);
}

function sixeight_admin_order_landing_page() {
  return 'Order different items on the site.';
}

/**
 * Implements hook_permission().
 */
function sixeight_admin_permission() {
  return array(
    'administer sixeight' => array(
      'title' => t('Administer Six:Eight settings'),
      'description' => t('Perform administration tasks for Six:Eight.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function sixeight_admin_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
  case 'views_exposed_form':
    switch ($form_state['view']->name) {
    case 'sermons':

      $field = 'field_speaker';
      $q = db_select('field_data_' . $field, 'f')
        ->fields('n', array('nid', 'title'));
      $q->join('node', 'n', 'f.'.$field.'_target_id = n.nid');

      $r = $q->execute();

      $form[$field . '_target_id']['#options'][''] = '-Any-';
      while ($row = $r->fetchAssoc() ) {
        $form[$field . '_target_id']['#options'][$row['nid']] = $row['title'];
      }

      $form[$field . '_target_id']['#type'] = 'select';
      unset($form[$field . '_target_id']['#size']);


      //Sermon Series
      $field = 'field_sermon_series';
      $q = db_select('field_data_' . $field, 'f')
        ->fields('n', array('nid', 'title'));
      $q->join('node', 'n', 'f.'.$field.'_target_id = n.nid');

      $r = $q->execute();

      $form[$field . '_target_id']['#options'][''] = '-Any-';
      while ($row = $r->fetchAssoc() ) {
        $form[$field . '_target_id']['#options'][$row['nid']] = $row['title'];
      }

      $form[$field . '_target_id']['#type'] = 'select';
      unset($form[$field . '_target_id']['#size']);


      break;
    }
    break;
  }
}

/**
 * Implements hook_stream_wrappers().
 */
function sixeight_admin_stream_wrappers() {
  return array(
    'overflow' => array(
      'name' => t('Overflow Files'),
      'class' => 'OverflowPublicStreamWrapper',
      'description' => t('Public local files served by the webserver on overflow drive.'),
      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
  );
}

/**
 * Implements hook_file_entity_access
 */
function sixeight_admin_file_entity_access($op, $file, $account) {
  if (isset($file->uri)) {
    $scheme = file_uri_scheme($file->uri);

    if ($scheme == 'overflow') {

      if ($file->uid == $account->uid && user_access('view own files', $account)) {
        // For non-private files, allow to see if user owns the file.
        return FILE_ENTITY_ACCESS_ALLOW;
      }
      elseif (user_access('view files', $account)) {
        // For non-private files, users can view if they have the 'view files'
        // permission.
        return FILE_ENTITY_ACCESS_ALLOW;
      }
    }
  }

  return FILE_ENTITY_ACCESS_IGNORE;
}

class OverflowPublicStreamWrapper extends DrupalLocalStreamWrapper {
  public function getDirectoryPath() {
    return '/mnt/overflow/sixeight';
  }

  public function getExternalUrl() {
    $path = str_replace('\\', '/', $this->getTarget());
    return url('system/overflow/' . drupal_encode_path($path), array('absolute' => TRUE));
  }
}

function sixeight_admin_views_ajax_data_alter(&$commands, $view) {
  $commands[] = ajax_command_prepend($commands[0]['selector'], theme('status_messages'));
}

/**
 * Implements hook_entity_info_alter().
 */
function sixeight_admin_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['sixeight_admin_front_page_block'] = array(
    'label' => t('Front Page Block'),
    'custom settings' => FALSE,
  );

}

/**
 * Implements hook_block_info().
 */
function sixeight_admin_block_info() {
  // This example comes from node.module.
  $blocks['front_page_ad_chart'] = array(
    'info' => t('Front Page ad schedule'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['front_page_block_chart'] = array(
    'info' => t('Front Page block schedule'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_theme().
 */
function sixeight_admin_theme($existing, $type, $theme, $path) {
  return array(
    'sixeight_admin_chart' => array(
      'render element' => 'element',
      'template' => 'templates/sixeight-admin-chart',
    ),
    'sixeight_admin_progress_bar' => array(
      'render element' => 'element',
      'template' => 'templates/sixeight-admin-progress-bar',
    ),
    'sixeight_sermon_player' => array(
      'variables' => array('file' => NULL, 'icon_directory' => NULL, 'text' => NULL),
      'template' => 'sixeight-sermon-player',
    ),
  );
}

function template_preprocess_sixeight_admin_chart(&$vars) {
  $date_months = '<div style="width: 100%">';
  $date_days = '<div style="width: 100%">';

  $start = $vars['element']['#startdate'];
  $end = $vars['element']['#enddate'];

  $count = ceil(($end-$start) / ((60 * 60 * 24) * 4));

  $month = '';

  for ($i = $start; $i <= $end; $i = $i + (60 * 60 * 24) * 4) {
    if (date('n', $i) != $month) {
      $month = date('n', $i);
      $date_months .= '<span class="month" style=" width: ' . round(100/$count, 4) . '%;">' . date('M', $i) . '</span>';
    }
    else {
      $date_months .= '<span class="month month-empty" style=" width: ' . round(100/$count, 4) . '%;">' . '</span>';
    }

    $date_days .= '<span class="date" style=" width: ' . (100/$count) . '%;">' . date('d', $i) . '</span>';
  }
  $date_months .= '</div>';
  $date_days .= '</div>';

  $vars['dates'] = $date_months . $date_days;
}

function template_preprocess_sixeight_admin_progress_bar(&$vars) {
  $vars['classes_array'][] = 'progress-bar';
  $vars['classes_array'][] = 'progress-bar-success';
}

/**
 * Implements hook_block_view().
 */
function sixeight_admin_block_view($delta = '') {

  drupal_add_css(drupal_get_path('module', 'sixeight_admin') . '/css/sixeight_admin.css');

  $block = array();
  switch ($delta) {
    case 'front_page_ad_chart':
      $block['subject'] = t('Front Page ad schedule');
      $block['content'] = _front_page_ad_chart_view();
      break;
    case 'front_page_block_chart':
      if (user_access('access content')) {
        $block['subject'] = t('Front Page block schedule');
        $block['content'] = _front_page_block_chart_view();
      }
      break;
  }
  return $block;
}

function _front_page_ad_chart_view() {
  $startdatetimestamp = mktime(0, 0, 0, date('m'), (date('d') - 2), date('Y'));
  $enddatetimestamp = mktime(0, 0, 0, (date('m')+3), (date('d')), date('Y'));

  $element['chart'] = array(
    '#theme' => 'sixeight_admin_chart',
    '#items' => array(),
    '#startdate' => $startdatetimestamp,
    '#enddate' => $enddatetimestamp,
  );

  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node')
    ->fieldCondition('field_front_ad', 'value', '1')
    ->fieldCondition('field_front_ad_duration', 'value', date('Y-m-d H:i:s', $enddatetimestamp), '<=')
    ->fieldCondition('field_front_ad_duration', 'value2', date('Y-m-d H:i:s', $startdatetimestamp), '>=')
    ->addTag('sixeight_add_drag_ad');
    //->fieldOrderBy('field_front_ad_duration', 'value');

  $r = $q->execute();

  if (isset($r['node'])) {
    $nodes = entity_load('node', array_keys($r['node']));

    foreach ($nodes as $node) {
      $node_date = $node->field_front_ad_duration[$node->language][0];

      $start_date = new DateObject($node_date['value'], new DateTimeZone($node_date['timezone_db']));
      $start_date->setTimezone(new DateTimeZone($node_date['timezone']));

      $end_date = new DateObject($node_date['value2'], new DateTimeZone($node_date['timezone_db']));
      $end_date->setTimezone(new DateTimeZone($node_date['timezone']));

      $node_start_timestamp = $start_date->getTimestamp();
      $node_end_timestamp = $end_date->getTimestamp();

      $start_percentage = max(0, ( $node_start_timestamp - $startdatetimestamp ) / ($enddatetimestamp - $startdatetimestamp) * 100 );
      $end_percentage = min(100, ( $node_end_timestamp - $startdatetimestamp ) / ($enddatetimestamp - $startdatetimestamp) * 100);

      $graph = array(
        '#theme' => 'sixeight_admin_progress_bar',
        '#start_percentage' => $start_percentage,
        '#end_percentage' => $end_percentage,
      );

      $element['chart']['#items'][] = array(
        'title' => $node->title,
        'graph' => render($graph),
        'node' => $node,
      );
    }
  }

  $element['link'] = array(
    '#markup' => l('Goto ordering page', 'admin/config/sixeight/order/front-page-ad'),
  );

  return $element;
}

function sixeight_admin_query_sixeight_add_drag_ad_alter(QueryAlterableInterface $query) {
  $query->leftJoin('draggableviews_structure', 'dvs', 'dvs.entity_id = field_data_field_front_ad0.entity_id AND dvs.view_name = :view_name AND dvs.view_display = :view_display', array(':view_name' => 'home_page_carousel', ':view_display' => 'page_1'));
  $query->orderBy('dvs.weight', 'ASC');
}

function _front_page_block_chart_view() {
  $startdatetimestamp = mktime(0, 0, 0, date('m'), (date('d') - 2), date('Y'));
  $enddatetimestamp = mktime(0, 0, 0, (date('m')+3), (date('d')), date('Y'));

  $element['chart'] = array(
    '#theme' => 'sixeight_admin_chart',
    '#items' => array(),
    '#startdate' => $startdatetimestamp,
    '#enddate' => $enddatetimestamp,
  );

  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node')
    ->fieldCondition('field_front_blocks', 'value', '1')
    ->fieldCondition('field_front_block_duration', 'value', date('Y-m-d H:i:s', $enddatetimestamp), '<=')
    ->fieldCondition('field_front_block_duration', 'value2', date('Y-m-d H:i:s', $startdatetimestamp), '>=')
    ->addTag('sixeight_add_drag_block');
    //->fieldOrderBy('field_front_block_duration', 'value');

  $r = $q->execute();

  if (isset($r['node'])) {
    $nodes = entity_load('node', array_keys($r['node']));

    foreach ($nodes as $node) {
      $node_date = $node->field_front_block_duration[$node->language][0];

      $start_date = new DateObject($node_date['value'], new DateTimeZone($node_date['timezone_db']));
      $start_date->setTimezone(new DateTimeZone($node_date['timezone']));

      $end_date = new DateObject($node_date['value2'], new DateTimeZone($node_date['timezone_db']));
      $end_date->setTimezone(new DateTimeZone($node_date['timezone']));

      $node_start_timestamp = $start_date->getTimestamp();
      $node_end_timestamp = $end_date->getTimestamp();

      $start_percentage = max(0, ( $node_start_timestamp - $startdatetimestamp ) / ($enddatetimestamp - $startdatetimestamp) * 100 );
      $end_percentage = min(100, ( $node_end_timestamp - $startdatetimestamp ) / ($enddatetimestamp - $startdatetimestamp) * 100);

      $graph = array(
        '#theme' => 'sixeight_admin_progress_bar',
        '#start_percentage' => $start_percentage,
        '#end_percentage' => $end_percentage,
      );

      $element['chart']['#items'][] = array(
        'title' => $node->title,
        'graph' => render($graph),
        'node' => $node,
      );
    }
  }

  $element['link'] = array(
    '#markup' => l('Goto ordering page', 'admin/config/sixeight/order/front-page-block'),
  );

  return $element;
}

function sixeight_admin_query_sixeight_add_drag_block_alter(QueryAlterableInterface $query) {
  $query->leftJoin('draggableviews_structure', 'dvs', 'dvs.entity_id = field_data_field_front_blocks0.entity_id AND dvs.view_name = :view_name AND dvs.view_display = :view_display', array(':view_name' => 'front_page_block', ':view_display' => 'page'));
  $query->orderBy('dvs.weight', 'ASC');
}

/**
 * Implements hook_field_formatter_info().
 */
function sixeight_admin_field_formatter_info() {
  return array(
    'sermon_player_and_download' => array(
      'label' => t('Player and download'),
      'field types' => array('file'),
      'settings' => array(
        'text' => t('Download [file:name]'),
        'stream' => FALSE,
        'audio_type' => 'default',
        'pause' => 'pause',
        'player_text' => 'filename',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function sixeight_admin_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
  case 'sermon_player_and_download':

    $element['text'] = array(
      '#type' => 'textfield',
      '#title' => t('Link text'),
      '#description' => t('This field support tokens.'),
      '#default_value' => $settings['text'],
      '#required' => TRUE,
    );

    $element['pause'] = array(
      '#title' => t('Pause Action'),
      '#type' => 'select',
      '#options' => _pause_options(),
      '#default_value' => $settings['pause'],
    );

    break;
  }

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function sixeight_admin_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  $options = _link_text_options();
  $pause = _pause_options();

  switch ($display['type']) {
  case 'sermon_player_and_download':

    $summary[] = t('Link text: %text', array('%text' => $settings['text']));
    $summary[] = t('Pause action: @pause', array('@pause' => $pause[$settings['pause']]));

    break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function sixeight_admin_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];


  switch ($display['type']) {
  case 'sermon_player_and_download':
    foreach ($items as $delta => $item) {
      $file = (object) $item;
      if (file_entity_access('download', $file)) {
        $element[$delta] = array(
          '#theme' => 'sixeight_sermon_player',
          '#file' => $file,
          '#text' => $settings['text'],
          '#attached' => array(
            'library' => array(
              array('soundmanager2', 'soundmanager2'),
              array('sixeight_admin', 'soundmanager2_mp3_player_buttons'),
            ),
          ),
        );
      }
    }
    drupal_add_js(array('soundmanager2' => array(
      'stream' => TRUE,
    )), 'setting');

    // Add in the config files
    theme('soundmanager2_config');

    break;
  }
  return $element;
}

function sixeight_admin_preprocess_sixeight_sermon_player(&$vars) {
  $file = $vars['file'];
  $icon_directory = $vars['icon_directory'];

  $uri = file_entity_download_uri($file);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $uri['options']['attributes']['type'] = $file->filemime . '; length=' . $file->filesize;
  $uri['options']['html'] = TRUE;
  $uri['options']['attributes']['title'] = t('Download');

  // Provide the default link text.
  if (!isset($vars['text'])) {
    $vars['text'] = t('Download [file:name]');
  }

  // Perform unsanitized token replacement if $uri['options']['html'] is empty
  // since then l() will escape the link text.
  $vars['text'] = token_replace($vars['text'], array('file' => $file), array('clear' => TRUE, 'sanitize' => !empty($uri['options']['html'])));


  $vars['icon'] = $icon;
  $vars['download_link'] = l('<i class="fa fa-download fa-fw"></i>', $uri['path'], $uri['options']);
  $vars['filesize'] = format_size($file->filesize);

  // Stream options
  $stream_options = array('html' => TRUE, 'query' => array('uuid' => uniqid()), 'attributes' => array('class' => array('sm2_button'), 'title' => 'Play'));
  $vars['stream_link'] = l('<i class="fa fa-play fa-fw"></i>', file_create_url($file->uri), $stream_options);

}

/**
 * Implements hook_entity_load().
 */
function sixeight_admin_entity_load($entities, $type) {
  if ($type == 'node') {
    foreach ($entities as $entity) {
      if ($entity->type == 'sermon') {
        if (empty($entity->field_sermon_image) && !empty($entity->field_sermon_series)) {
          $sermon_series = node_load($entity->field_sermon_series[LANGUAGE_NONE][0]['target_id']);

          if (!empty($sermon_series->field_sermon_image)) {
            $entity->field_sermon_image = $sermon_series->field_sermon_image;
          }
        }
      }
    }
  }
}
